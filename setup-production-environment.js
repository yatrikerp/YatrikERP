#!/usr/bin/env node

/**
 * YATRIK ERP - Production Environment Setup Script
 * This script helps set up production environment variables for Render deployment
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// ANSI color codes
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function setupProductionEnvironment() {
  log('\n===========================================', 'cyan');
  log('  YATRIK ERP - PRODUCTION SETUP', 'cyan');
  log('===========================================\n', 'cyan');

  log('This script will help you set up production environment variables for Render deployment.\n', 'yellow');

  // Backend Environment Variables
  log('üîß BACKEND ENVIRONMENT VARIABLES', 'bold');
  log('================================', 'bold');

  const backendEnv = {
    // Database
    MONGODB_URI: await askQuestion('MongoDB Atlas URI: '),
    
    // Security
    JWT_SECRET: await askQuestion('JWT Secret (min 32 chars): ') || 'your-super-secure-jwt-secret-minimum-32-characters-long',
    SESSION_SECRET: await askQuestion('Session Secret (min 32 chars): ') || 'your-super-secure-session-secret-minimum-32-characters-long',
    
    // URLs
    FRONTEND_URL: await askQuestion('Frontend URL (https://yatrik-frontend-app.onrender.com): ') || 'https://yatrik-frontend-app.onrender.com',
    BACKEND_URL: await askQuestion('Backend URL (https://yatrikerp.onrender.com): ') || 'https://yatrikerp.onrender.com',
    
    // Google OAuth
    GOOGLE_CLIENT_ID: await askQuestion('Google OAuth Client ID: '),
    GOOGLE_CLIENT_SECRET: await askQuestion('Google OAuth Client Secret: '),
    
    // Optional configurations
    EMAIL_USER: await askQuestion('Email for notifications (optional): '),
    EMAIL_PASS: await askQuestion('Email app password (optional): '),
    RAZORPAY_KEY_ID: await askQuestion('Razorpay Key ID (optional): '),
    RAZORPAY_KEY_SECRET: await askQuestion('Razorpay Key Secret (optional): '),
  };

  // Frontend Environment Variables
  log('\nüé® FRONTEND ENVIRONMENT VARIABLES', 'bold');
  log('==================================', 'bold');

  const frontendEnv = {
    REACT_APP_API_URL: backendEnv.BACKEND_URL,
    VITE_API_BASE_URL: backendEnv.BACKEND_URL,
    VITE_BACKEND_URL: backendEnv.BACKEND_URL,
    VITE_GOOGLE_MAPS_API_KEY: await askQuestion('Google Maps API Key: ') || 'AIzaSyAsAkznA2sJF0pp4iAq5H2uqP9FIATjdbk',
    REACT_APP_RAZORPAY_KEY: backendEnv.RAZORPAY_KEY_ID || 'rzp_live_your_razorpay_key_here',
    NODE_ENV: 'production'
  };

  // Generate backend .env content
  const backendEnvContent = `# YATRIK ERP Backend - Production Environment Configuration
# Generated by production setup script

# Database Configuration
MONGODB_URI=${backendEnv.MONGODB_URI}

# Server Configuration
PORT=5000
NODE_ENV=production

# Security Configuration
JWT_SECRET=${backendEnv.JWT_SECRET}
JWT_EXPIRE=7d
SESSION_SECRET=${backendEnv.SESSION_SECRET}

# Frontend Configuration
FRONTEND_URL=${backendEnv.FRONTEND_URL}
BACKEND_URL=${backendEnv.BACKEND_URL}

# Google OAuth Configuration
GOOGLE_CLIENT_ID=${backendEnv.GOOGLE_CLIENT_ID}
GOOGLE_CLIENT_SECRET=${backendEnv.GOOGLE_CLIENT_SECRET}
GOOGLE_CALLBACK_URL=${backendEnv.BACKEND_URL}/api/auth/google/callback

# CORS Configuration
CORS_ORIGIN=${backendEnv.FRONTEND_URL},https://yatrikerp.live

${backendEnv.EMAIL_USER ? `# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=${backendEnv.EMAIL_USER}
EMAIL_PASS=${backendEnv.EMAIL_PASS}` : ''}

${backendEnv.RAZORPAY_KEY_ID ? `# Razorpay Configuration
RAZORPAY_KEY_ID=${backendEnv.RAZORPAY_KEY_ID}
RAZORPAY_KEY_SECRET=${backendEnv.RAZORPAY_KEY_SECRET}` : ''}
`;

  // Generate frontend .env content
  const frontendEnvContent = `# YATRIK ERP Frontend - Production Environment Configuration
# Generated by production setup script

# API Configuration
REACT_APP_API_URL=${frontendEnv.REACT_APP_API_URL}
VITE_API_BASE_URL=${frontendEnv.VITE_API_BASE_URL}
VITE_BACKEND_URL=${frontendEnv.VITE_BACKEND_URL}

# Google Maps API Configuration
VITE_GOOGLE_MAPS_API_KEY=${frontendEnv.VITE_GOOGLE_MAPS_API_KEY}

# Razorpay Configuration
REACT_APP_RAZORPAY_KEY=${frontendEnv.REACT_APP_RAZORPAY_KEY}

# Production Configuration
NODE_ENV=production
`;

  // Write files
  try {
    // Backend .env
    const backendEnvPath = path.join(__dirname, 'backend', '.env');
    fs.writeFileSync(backendEnvPath, backendEnvContent);
    log('‚úÖ Backend .env file created', 'green');

    // Frontend .env
    const frontendEnvPath = path.join(__dirname, 'frontend', '.env');
    fs.writeFileSync(frontendEnvPath, frontendEnvContent);
    log('‚úÖ Frontend .env file created', 'green');

    // Create Render environment variables file
    const renderEnvPath = path.join(__dirname, 'render-environment-variables.txt');
    const renderEnvContent = `# RENDER ENVIRONMENT VARIABLES
# Copy these to your Render service environment variables

# BACKEND SERVICE ENVIRONMENT VARIABLES:
MONGODB_URI=${backendEnv.MONGODB_URI}
NODE_ENV=production
PORT=5000
JWT_SECRET=${backendEnv.JWT_SECRET}
JWT_EXPIRE=7d
SESSION_SECRET=${backendEnv.SESSION_SECRET}
FRONTEND_URL=${backendEnv.FRONTEND_URL}
BACKEND_URL=${backendEnv.BACKEND_URL}
GOOGLE_CLIENT_ID=${backendEnv.GOOGLE_CLIENT_ID}
GOOGLE_CLIENT_SECRET=${backendEnv.GOOGLE_CLIENT_SECRET}
GOOGLE_CALLBACK_URL=${backendEnv.BACKEND_URL}/api/auth/google/callback
CORS_ORIGIN=${backendEnv.FRONTEND_URL},https://yatrikerp.live
${backendEnv.EMAIL_USER ? `EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=${backendEnv.EMAIL_USER}
EMAIL_PASS=${backendEnv.EMAIL_PASS}` : ''}
${backendEnv.RAZORPAY_KEY_ID ? `RAZORPAY_KEY_ID=${backendEnv.RAZORPAY_KEY_ID}
RAZORPAY_KEY_SECRET=${backendEnv.RAZORPAY_KEY_SECRET}` : ''}

# FRONTEND SERVICE ENVIRONMENT VARIABLES:
REACT_APP_API_URL=${frontendEnv.REACT_APP_API_URL}
VITE_API_BASE_URL=${frontendEnv.VITE_API_BASE_URL}
VITE_BACKEND_URL=${frontendEnv.VITE_BACKEND_URL}
VITE_GOOGLE_MAPS_API_KEY=${frontendEnv.VITE_GOOGLE_MAPS_API_KEY}
REACT_APP_RAZORPAY_KEY=${frontendEnv.REACT_APP_RAZORPAY_KEY}
NODE_ENV=production
`;

    fs.writeFileSync(renderEnvPath, renderEnvContent);
    log('‚úÖ Render environment variables file created', 'green');

    log('\nüéâ Production environment setup completed!', 'green');
    log('\nüìÅ Files created:', 'cyan');
    log('- backend/.env', 'cyan');
    log('- frontend/.env', 'cyan');
    log('- render-environment-variables.txt', 'cyan');

    log('\nüöÄ Next steps:', 'yellow');
    log('1. Copy environment variables from render-environment-variables.txt to Render dashboard', 'yellow');
    log('2. Deploy backend service to Render', 'yellow');
    log('3. Deploy frontend static site to Render', 'yellow');
    log('4. Update Google OAuth redirect URIs in Google Cloud Console', 'yellow');
    log('5. Test the deployment', 'yellow');

    log('\nüìö Documentation:', 'blue');
    log('- See RENDER_DEPLOYMENT_GUIDE.md for detailed deployment instructions', 'blue');

  } catch (error) {
    log(`\n‚ùå Error creating environment files: ${error.message}`, 'red');
  }

  rl.close();
}

// Run the setup
if (require.main === module) {
  setupProductionEnvironment().catch(error => {
    log(`\n‚ùå Setup failed: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { setupProductionEnvironment };
